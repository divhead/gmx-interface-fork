name: Deploy V2

on:
  push:
    branches: ["master"]
  # manual trigger
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest

    environment: deploy

    outputs:
      cid: ${{ steps.pinata.outputs.hash }}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: yarn
  
      - run: yarn
      - run: yarn build

      # - name: Pinata
      #   id: pinata
      #   uses: anantaramdas/ipfs-pinata-deploy-action@v1.6.4
      #   with:
      #     pin-name: gmx-site
      #     path: './build'
      #     pinata-api-key: ${{ secrets.PINATA_API_KEY }}
      #     pinata-secret-api-key: ${{ secrets.PINATA_API_SECRET_KEY }}
      #     verbose: true
      #     remove-old: true

      - name: Pinata
        id: pinata
        uses: aave/pinata-action@a3409e26f4cb859a2d9984109317caac53db5f68
        with:
          PINATA_API_KEY: '${{ secrets.PINATA_API_KEY }}'
          PINATA_SECRET_KEY: '${{ secrets.PINATA_API_SECRET_KEY }}'
          PIN_ALIAS: 'gmx-app'
          BUILD_LOCATION: './build'
          CID_VERSION: 1

      # - name: Crust
      #   uses: crustio/ipfs-crust-action@v2.0.3
      #   continue-on-error: true
      #   timeout-minutes: 2
      #   with:
      #     cid: ${{ steps.pinata.outputs.hash }}
      #     seeds: ${{ secrets.CRUST_SEEDS }}

  update-dns:
    needs: 
      - deploy

    runs-on: ubuntu-latest

    environment: deploy

    steps:
      - uses: actions/checkout@v3
  
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: yarn
    
      - run: yarn

      - name: Resolve CID
        id: resolve-cid
        uses: maku693/action-puppeteer-script@v0
        with:
          script: |
            let retries = 20
  
            while (retries > 0) {
              const page = await browser.newPage();
              try {
                await page.goto('https://${{ needs.deploy.outputs.cid }}.ipfs.cf-ipfs.com');
                await page.waitForSelector('.connect-wallet')
                let element = await page.$('.connect-wallet')

                let value = await page.evaluate(el => el.textContent, element)
                return value;
              } catch (e) {
                retries--;
              }
            }

            throw new Error('Unable to resolve')

      - name: Resolve CID 2
        id: resolve-cid-2
        uses: maku693/action-puppeteer-script@v0
        with:
          script: |
            let retries = 20
  
            while (retries > 0) {
              const page = await browser.newPage();
              try {
                await page.goto('https://${{ needs.deploy.outputs.cid }}.ipfs.cf-ipfs.com');
                await page.waitForSelector('.connect-wallet')
                let element = await page.$('.connect-wallet')

                let value = await page.evaluate(el => el.textContent, element)
                return value;
              } catch (e) {
                retries--;
              }
            }

            throw new Error('Unable to resolve')

      - name: Resolve CID 3
        id: resolve-cid-3
        uses: maku693/action-puppeteer-script@v0
        with:
          script: |
            let retries = 20
  
            while (retries > 0) {
              const page = await browser.newPage();
              try {
                await page.goto('https://${{ needs.deploy.outputs.cid }}.ipfs.cf-ipfs.com');
                await page.waitForSelector('.connect-wallet')
                let element = await page.$('.connect-wallet')

                let value = await page.evaluate(el => el.textContent, element)
                return value;
              } catch (e) {
                retries--;
              }
            }

            throw new Error('Unable to resolve')


      - name: Update DNS Netlify
        env:
          NETLIFY_API_KEY: ${{ secrets.NETLIFY_API_KEY }}
          NETLIFY_DNS_ZONE_ID: ${{ secrets.NETLIFY_DNS_ZONE_ID }}
          NETLIFY_DNS_LINK: ${{ secrets.NETLIFY_DNS_LINK }}
          IPFS_HASH: ${{ needs.deploy.outputs.cid }}
        run: node ./scripts/update-dns-netlify.mjs

      - name: Resolve dnsLink
        id: resolve-dnsLink
        uses: maku693/action-puppeteer-script@v0
        with:
          script: |
            let retries = 5
  
            while (retries > 0) {
              const page = await browser.newPage();
              try {
                await page.goto('https://app-dhead-io.ipns.cf-ipfs.com');
                await page.waitForSelector('.connect-wallet')
                let element = await page.$('.connect-wallet')

                let value = await page.evaluate(el => el.textContent, element)

                return value;
              } catch (e) {
                retries--;
              }
            }

            throw new Error('Unable to resolve')

      - run: echo '${{ steps.resolve-dnsLink.outputs.result }}'

      - name: Test site
        id: resolve-site
        uses: maku693/action-puppeteer-script@v0
        with:
          script: |
            let retries = 20
  
            while (retries > 0) {
              const page = await browser.newPage();
              try {
                await page.goto('https://app.dhead.io');
                await page.waitForSelector('.connect-wallet')
                let element = await page.$('.connect-wallet')

                let value = await page.evaluate(el => el.textContent, element)

                return value;
              } catch (e) {
                retries--;
              }
            }

            throw new Error('Unable to resolve')

      - run: echo '${{ steps.resolve-site.outputs.result }}'